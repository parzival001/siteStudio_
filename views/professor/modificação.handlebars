

 {{!-- ALTER TABLE pacotes_aluno MODIFY COLUMN categoria_id INT NULL;

 ALTER TABLE pacotes_aluno MODIFY COLUMN categoria_id INT NULL;

DESCRIBE pacotes_aluno;

ALTER TABLE pacotes_aluno
MODIFY COLUMN data_validade DATE NULL;


CREATE TABLE creditos (
  id INT AUTO_INCREMENT PRIMARY KEY,
  aluno_id INT NOT NULL,
  categoria_id INT NOT NULL,
  data_credito DATE NOT NULL,
  validade DATE NOT NULL,
  usado BOOLEAN DEFAULT FALSE,
  usado_em DATE,
  FOREIGN KEY (aluno_id) REFERENCES alunos(id),
  FOREIGN KEY (categoria_id) REFERENCES categorias(categoria_id)
);

CREATE TABLE pacotes_modalidades (
  id INT AUTO_INCREMENT PRIMARY KEY,
  pacote_id INT NOT NULL,
  categoria_id INT NOT NULL,
  FOREIGN KEY (pacote_id) REFERENCES pacotes(id) ON DELETE CASCADE,
  FOREIGN KEY (categoria_id) REFERENCES categorias(categoria_id)
);


ALTER TABLE pacotes_modalidades
DROP FOREIGN KEY pacotes_modalidades_ibfk_1;

ALTER TABLE pacotes_modalidades
ADD CONSTRAINT pacotes_modalidades_ibfk_1
FOREIGN KEY (pacote_id) REFERENCES pacotes_aluno(id) ON DELETE CASCADE;


UPDATE tipos_aula
SET tipo_id = 1
WHERE tipo_id IS NULL;

INSERT INTO tipos_aula (nome) VALUES ('DanÃ§a'), ('Pilates'), ('Funcional');

INSERT INTO aulas (professor_id, categoria_id, tipo_id, data, horario, vagas, status)
VALUES (1, 3, 1, '2025-05-20', '12:00:00', 5, 'pendente');

ALTER TABLE tipos_aula MODIFY id INT AUTO_INCREMENT;

UPDATE aulas SET tipo_id = 3 WHERE tipo_id IS NULL;

INSERT INTO aulas (tipo_id, professor_id, data, horario, vagas, status)
VALUES (3, 1, '2025-05-13', '12:00:00', 5, 'pendente');



**********************************

SELECT id, data, horario, STR_TO_DATE(CONCAT(data, ' ', horario), '%Y-%m-%d %H:%i:%s') AS data_hora
FROM aulas
ORDER BY data_hora;

SELECT * FROM pacotes WHERE id = 16;

ALTER TABLE pacotes ADD COLUMN aluno_id INT;

SELECT * FROM pacotes WHERE id = 1;

SHOW COLUMNS FROM categorias;

ALTER TABLE aulas_alunos
ADD COLUMN pacote_id INT NULL;

SELECT * FROM aulas WHERE status = 'pendente' AND vagas > 0

SELECT 
  a.id, a.data, a.horario, a.vagas, a.status, a.categoria_id, c.nome AS categoria, p.nome AS professor
FROM aulas a
LEFT JOIN categorias c ON a.categoria_id = c.id
JOIN professores p ON a.professor_id = p.id
WHERE a.status = 'pendente'
ORDER BY a.data ASC;














--}}